import re
import os
import sys

import pandas as pd

from urllib.request import urlretrieve


def download(app_config: dict, user_config: dict):
    """ Downloads the EXPLOITDB XML file """
    
    print("\n***** Beginning processing of EPSS files *****\n")
    
    EXPLOITDB_DOWNLOAD_URL = app_config["download_URLs"]["EXPLOITDB_DOWNLOAD_URL"]
    EXPLOITDB_DIR=app_config["EXPLOITDB_DIR"]
    EXPLOITDB_XML_FILE=app_config["EXPLOITDB_XML_FILE"]
    EXPLOITDB_PATH=EXPLOITDB_DIR+EXPLOITDB_XML_FILE
    
    ExploitDB_download = False
    
    if os.path.isfile(EXPLOITDB_PATH):
        print(f"Existing ExploitDB XML file located at: {EXPLOITDB_PATH}")
        if user_config["EXPLOITDB_DATA_AUTO_UPDATE"] == "True":
            print("ExploitDB is configured for auto update, downloading ExploitDB data.")
            ExploitDB_download = True
        elif user_config["KEV_DATA_AUTO_UPDATE"] == "False":
            print("ExploitDB is not configured for auto update, no ExploitDB update will be downloaded.")
            print("Warning: you may be using an outdated version of the ExploitDB data set")
    elif not os.path.isfile(EXPLOITDB_PATH):
        print(f"No existing ExploitDB file found at location: {EXPLOITDB_PATH}")
        if user_config["AUTO_DOWNLOAD_ALL"] == "True":
            print(f"Auto download set to {user_config['AUTO_DOWNLOAD_ALL']}, ExploitDB data will be downloaded")
            ExploitDB_download = True
        elif user_config["AUTO_DOWNLOAD_ALL"] == "False":
            print(f"Auto download set to {user_config['AUTO_DOWNLOAD_ALL']}, ExploitDB data will not be downloaded")    
        else:
            sys.exit("No ExploitDB File found, error processing user config settings, terminating program")
        
    if ExploitDB_download == True:
        try:
            if not os.path.exists(EXPLOITDB_DIR):
                os.makedirs(EXPLOITDB_DIR)
                print(f"Creating directory {EXPLOITDB_DIR}")
            
            urlretrieve(url=EXPLOITDB_DOWNLOAD_URL, filename=EXPLOITDB_PATH)
        except Exception as e:
            sys.exit(f"Failed to process ExploitDB file: {e}")
        else:
            print(f"Updated ExploitDB file at: {EXPLOITDB_PATH}") 

            
def extract(app_config: dict):
    """ Enrich CVE data with exploit data from ExploitDB SearchSploit """
    
    print("\n***** Beginning data enrichment with ExploitDB SearchSploit data *****\n")
    
    searchsploit_xml_path = app_config["EXPLOITDB_DIR"]+app_config["EXPLOITDB_XML_FILE"]
    searchsploit_excel_path = app_config["EXPLOITDB_DIR"]+app_config["EXPLOITDB_EXCEL_FILE"]
    EXPLOITDB_EXCLUSION_WORDS = app_config["EXPLOITDB_EXCLUSION_WORDS"]
    
    try:
        print(f"Attempting to process: {searchsploit_xml_path}")    
        searchsploit_df = pd.read_xml(searchsploit_xml_path, parser="etree")
        filtered_searchsploit_df = searchsploit_df[["id","link","edb","textualDescription"]]

        # Print out complete XML database to an Excel file
        # filtered_searchsploit_df.to_excel("./data/exploitdb/ghdb_total.xlsx")
        
        searchsploit_cve_with_dorks_df = filtered_searchsploit_df[filtered_searchsploit_df["textualDescription"].str.contains('CVE:')]
        searchsploit_cve_with_dorks_df = searchsploit_cve_with_dorks_df.dropna()
        
        for word in EXPLOITDB_EXCLUSION_WORDS:
            searchsploit_cve_with_dorks_df = searchsploit_cve_with_dorks_df[~searchsploit_cve_with_dorks_df["textualDescription"].str.contains(word)]

        searchsploit_cve_with_dorks_df["cve_id"] = searchsploit_cve_with_dorks_df["textualDescription"].apply(filter_cve)
        searchsploit_cve_only_df = searchsploit_cve_with_dorks_df.drop('textualDescription', axis=1)

    except Exception as e:
        sys.exit(f"Unable to process ExploitDB file with error: {e}")
    else:
        print(f"Extracted all CVE data from file: {searchsploit_xml_path}")
        try:
            searchsploit_cve_only_df.to_excel(searchsploit_excel_path)
        except Exception as e:
            sys.exit(f"Error writing Excel file to: {searchsploit_excel_path}")
        else:
            print(f"Excel file written to: {searchsploit_excel_path}")


def filter_cve(EXPLOITDB_string: str):
    """ Use for the EXPLOITDB_cve_extract() """
    """ Used to filter string data from textualDescription from ExploitDB data """
    
    EXPLOITDB_string = EXPLOITDB_string.replace('CVE: ','CVE-')
    EXPLOITDB_string = EXPLOITDB_string.replace('CVE-CVE-','CVE-')

    matches = re.search(r"CVE-\d{4}-\d{4,7}", EXPLOITDB_string)
    cve_id = matches.group()
    return cve_id

          
if __name__ == "__main__":
    import config
    app_config, user_config = config.bootstrap()
    extract(app_config)